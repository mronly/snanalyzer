<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_82473_snanalyzer.AnalyzerQueueHandler</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>AnalyzerQueueHandler</name>
        <script><![CDATA[var AnalyzerQueueHandler = Class.create();
AnalyzerQueueHandler.prototype = Object.extendsObject(x_82473_snanalyzer.AnalyzerUtil, {
	/**SNDOC
	@name processQueueEntry
	@description processing the incoming queue record (called by business rule)

	@param {GlideRecord} [grQueue] - description

	@example
	var h = new x_82473_snanalyzer.AnalyzerQueueHandler();

	@returns {type} description
	*/
	processQueueEntry: function(grQueue) {
		report = {
			"error" : false,
			"message" : '',
			"errorMessage" : ''
		};
		try {
			// check if transport is for current instance
			if(grQueue.transport_to != gs.getProperty('instance_name')) {
				grQueue.setValue('status', 'wft');
				grQueue.update();
				report.message = 'set to waiting for transport';
				return report;
			}
			
			// convert string payload to object
			var payload = JSON.parse(grQueue.payload);

			// process incoming message
			report.message = this.callIRE(payload);

			// check if error is reported
			if(report.message.hasOwnProperty('items')) {
				for (var key in report.message.items) {
					if (report.message.items[key].hasOwnProperty('errors')) {
						report.error = true;
					}
				}
			} else {
				report.error = true;
			}
		} catch (e) {
			report.error = true;
			report.errorMessage = e;
		}
		
		if(report.error == true) {
			grQueue.setValue('message', JSON.stringify(report, null, 4));
			grQueue.setValue('status', 'error');
			grQueue.update();
		} else {
			grQueue.deleteRecord('success');
		}
	},
    type: 'AnalyzerQueueHandler'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-05-03 05:44:21</sys_created_on>
        <sys_id>470c82a12fe0d0103b3adb9df699b611</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>AnalyzerQueueHandler</sys_name>
        <sys_package display_value="ServiceNow Analyser" source="x_82473_snanalyzer">906efe002fe890103b3adb9df699b6cd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ServiceNow Analyser">906efe002fe890103b3adb9df699b6cd</sys_scope>
        <sys_update_name>sys_script_include_470c82a12fe0d0103b3adb9df699b611</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-05-03 12:37:22</sys_updated_on>
    </sys_script_include>
</record_update>
